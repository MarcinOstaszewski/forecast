{"version":3,"sources":["containers/WeatherNow/WeatherNow.module.css","containers/Forecast/Forecast.module.css","containers/CityInput/CityInput.js","containers/WeatherNow/WeatherNow.js","containers/WeatherForecast/WeatherForecast.js","containers/Forecast/Forecast.js","App.js","serviceWorker.js","index.js","containers/WeatherForecast/WeatherForecast.module.css","containers/CityInput/CityInput.module.css"],"names":["module","exports","CityInput","state","city","sendCityName","e","preventDefault","props","getWeatherData","changeInputTextHandler","setState","target","name","value","id","styles","locationForm","type","onChange","this","checkWeather","onClick","Component","WeatherNow","iconUrl","visible","weatherNow","display","now","console","log","country","coords","description","pressure","humidity","windspeed","winddeg","temp1","temp2","icon","cityName","coord","lat","lon","sys","weather","main","wind","speed","deg","Number","temp","toFixed","className","imgBig","src","alt","style","row","column","details","WeatherForecast","weatherForecast","columns","data","i","nineth","key","imgSml","dt_txt","slice","push","txtBig","Forecast","errorMessage","url","apiID","query","axios","all","get","then","forecast","list","catch","error","response","message","App","Boolean","window","location","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4ffb6ebc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"WeatherNow_row__ZEI9u\",\"column\":\"WeatherNow_column__2sBLO\",\"imgBig\":\"WeatherNow_imgBig__3dcVT\",\"details\":\"WeatherNow_details__2IeMe\",\"name\":\"WeatherNow_name__2Rycq\",\"coords\":\"WeatherNow_coords__u4zrR\",\"temp\":\"WeatherNow_temp__3dM7s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage\":\"Forecast_errorMessage__1GH8e\"};","import React, { Component } from 'react';\r\n\r\nimport styles from \"./CityInput.module.css\"\r\n\r\nclass CityInput extends Component {\r\n    state = { city: '' }\r\n\r\n    sendCityName = e => {\r\n        e.preventDefault()\r\n        this.props.getWeatherData(this.state.city)\r\n    }\r\n\r\n    changeInputTextHandler = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    // componentDidMount = () => {\r\n    //     this.nameInput.focus();\r\n    // }\r\n\r\n    render() { \r\n        return ( \r\n            <main>\r\n                <form id={styles.locationForm}>\r\n                    <fieldset>\r\n                        <legend>Input city name </legend>\r\n                        <p>\r\n                            <input type=\"text\" \r\n                                id={styles.city} \r\n                                name=\"city\" \r\n                                onChange={this.changeInputTextHandler} \r\n                                value={this.state.city}/>\r\n                        </p>\r\n                        <button id={styles.checkWeather} onClick={this.sendCityName}>Check weather</button>\r\n                    </fieldset>\r\n                </form>\r\n            </main>\r\n         );\r\n    }\r\n}\r\n \r\nexport default CityInput;","import React, { Component } from 'react';\r\n\r\nimport styles from './WeatherNow.module.css'\r\n\r\nclass WeatherNow extends Component {\r\n\r\n    iconUrl = 'http://openweathermap.org/img/w/'\r\n\r\n    render() { \r\n        \r\n        let visible = (!(this.props.weatherNow) ) ? {display: 'none'} : {};\r\n        let now = this.props.weatherNow\r\n        console.log(now)\r\n        let cityName = this.props.cityName;\r\n        let country, coords, description, pressure, humidity, windspeed, winddeg, temp1, temp2, icon;\r\n        if (now) {\r\n            coords = `Latitude: ${now.coord.lat}, Longitude: ${now.coord.lon}`;\r\n            country = `(${now.sys.country})`\r\n            description = `Now: ${now.weather[0].description}`;\r\n            humidity = `Humidity: ${now.main.humidity} % `;\r\n            pressure = `Pressure: ${now.main.pressure} hPa`;\r\n            windspeed = `Wind speed: ${now.wind.speed} km/h`;\r\n            winddeg = `Wind direction: ${now.wind.deg} deg`;\r\n            temp1 = `Temperature:`;\r\n            temp2 = `${(Number(now.main.temp) - 273.15).toFixed(1)} C | ${(Number(now.main.temp)*9/5-459.67).toFixed(1)} F`;\r\n            icon = <img className={styles.imgBig} src={this.iconUrl + now.weather[0].icon + '.png'}  alt=\"weather icon\"  />\r\n        }\r\n\r\n        return ( \r\n            <section id=\"weatherNow\" style={visible}>\r\n                <div className={styles.row}>\r\n                    <div id={styles.name}>{cityName}<span>{country}</span></div>\r\n                    <div id={styles.coords}>{coords}</div>\r\n                </div>\r\n                <div className={styles.row}>\r\n                    <div className={styles.column} id={styles.details}>\r\n                        <div id={styles.description}>{description}</div>\r\n                        <div id={styles.pressure}>{pressure}</div>\r\n                        <div id={styles.humidity}>{humidity}</div>\r\n                        <div id={styles.windspeed}>{windspeed}</div>\r\n                        <div id={styles.winddeg}>{winddeg}</div>\r\n                    </div>\r\n                    <div className={styles.row}>\r\n                        <div>{icon}</div>\r\n                        <div id={styles.temp}><span>{temp1}</span><b>{temp2}</b></div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n         );\r\n    }\r\n}\r\n \r\nexport default WeatherNow;","import React, { Component } from 'react';\r\n\r\nimport styles from './WeatherForecast.module.css'\r\n\r\nclass WeatherForecast extends Component {\r\n\r\n    iconUrl = 'http://openweathermap.org/img/w/'\r\n\r\n    render() { \r\n        let visible = (!(this.props.weatherForecast) ) ? {display: 'none'} : {};\r\n        let columns = []\r\n\r\n        if (this.props.weatherForecast !== false) {\r\n            let data = this.props.weatherForecast;\r\n            for (let i = 0; i < 9; i++) { // creates 9 columns with forecast data\r\n                let column = <div className={styles.nineth} key={i}>\r\n                        <div className={styles.temp}>{(Number(data[i].main.temp) - 273.15).toFixed(1)} C</div>\r\n                        <div className={styles.icon}>\r\n                            <img src={this.iconUrl+data[i].weather[0].icon+\".png\"} alt=\"weather icon\" className={styles.imgSml}></img>\r\n                        </div>\r\n                        <div className={styles.temp}>{data[i].dt_txt.slice(5, 10)} {data[i].dt_txt.slice(-8, -3)}</div>\r\n                    </div>;\r\n\r\n                columns.push(column);\r\n            }\r\n        }\r\n        \r\n        return ( \r\n            <section id=\"weather-forecast\" style={visible}>\r\n                <span className={styles.txtBig}>Forecast:</span>\r\n                <div className={styles.row}>{columns}</div>\r\n            </section>\r\n         );\r\n    }\r\n}\r\n \r\nexport default WeatherForecast;","import React, {Component} from 'react';\r\n\r\nimport CityInput from '../CityInput/CityInput';\r\nimport WeatherNow from '../WeatherNow/WeatherNow';\r\nimport WeatherForecast from '../WeatherForecast/WeatherForecast';\r\n\r\n            import axios from 'axios';\r\n            // import { forecastData, weatherData } from '../../weatherData';\r\n\r\nimport styles from './Forecast.module.css'\r\n\r\nclass Forecast extends Component {\r\n    state = {\r\n        weatherNow: false,\r\n        weatherForecast: false,\r\n        errorMessage: false,\r\n        city: ''\r\n    }\r\n\r\n    url = 'http://api.openweathermap.org/data/2.5/'\r\n    apiID = 'fd8de74bb30e63fa5bdd052cabd79493'\r\n\r\n    getWeatherData = (city) => {\r\n        \r\n        const query = `?q=${city}&APPID=${this.apiID}`\r\n        axios.all([\r\n            axios.get(`${this.url}weather${query}`),\r\n            axios.get(`${this.url}forecast${query}`)\r\n            ])\r\n            .then(([weather, forecast]) => {\r\n                this.setState({\r\n                    weatherNow: weather.data,\r\n                    weatherForecast: forecast.data.list,\r\n                    city: city,\r\n                    errorMessage: false\r\n                })\r\n            })\r\n            .catch(error => {\r\n                // displays error message and hides both weather displays\r\n                this.setState({\r\n                    errorMessage: error.response.data.message,\r\n                    weatherNow: false,\r\n                    weatherForecast: false,\r\n                })\r\n            })\r\n\r\n                        // this.setState({\r\n                        //     weatherNow: weatherData,\r\n                        //     weatherForecast: forecastData.list,\r\n                        //     city: city\r\n                        // })\r\n    }\r\n\r\n\r\n    // componentDidMount = () => {\r\n    //     this.getWeatherData('Krakow')\r\n    // }\r\n\r\n    render () {\r\n\r\n        let now = this.state.weatherNow;\r\n        let forecast = this.state.weatherForecast;\r\n        let cityName = this.state.city;\r\n        let visible = (!(this.state.errorMessage) ) ? {display: 'none'} : {};\r\n        console.log(visible, this.state.errorMessage);\r\n\r\n        return (\r\n            <div className={styles.forecast}>\r\n                <CityInput getWeatherData={this.getWeatherData} />\r\n                <WeatherNow weatherNow={now} cityName={cityName} />\r\n                <WeatherForecast weatherForecast={forecast}/>\r\n                <div style={visible} className={styles.errorMessage}>Error message: \"{this.state.errorMessage}\"</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Forecast;","import React, { Component } from 'react';\nimport Forecast from './containers/Forecast/Forecast';\n\nclass App extends Component {\n  render() {\n    return (\n        <div className=\"App\">\n          <Forecast />\n        </div>\n    );\n  }\n}\n\nexport default App;\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst app = <App />\n\nReactDOM.render(app, document.getElementById('root'));\n\nserviceWorker.unregister();\n ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"WeatherForecast_row__1N3OK\",\"txtBig\":\"WeatherForecast_txtBig__3qJw0\",\"imgSml\":\"WeatherForecast_imgSml__p_q39\",\"nineth\":\"WeatherForecast_nineth__1M01d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"locationForm\":\"CityInput_locationForm__3c2wJ\",\"checkWeather\":\"CityInput_checkWeather__1gD_6\"};"],"sourceRoot":""}
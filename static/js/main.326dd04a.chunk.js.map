{"version":3,"sources":["containers/WeatherNow/WeatherNow.module.css","containers/Forecast/Forecast.module.css","assets/bigCities.js","containers/CityInput/CityInput.js","containers/WeatherNow/WeatherNow.js","containers/WeatherForecast/WeatherForecast.js","containers/Forecast/Forecast.js","App.js","serviceWorker.js","index.js","containers/WeatherForecast/WeatherForecast.module.css","containers/CityInput/CityInput.module.css"],"names":["module","exports","bigCities","CityInput","state","city","sendCityName","e","preventDefault","props","getWeatherData","randomCityName","randNum","Math","floor","random","length","setState","changeInputTextHandler","target","name","value","id","styles","locationForm","type","onChange","this","className","flexRow","checkWeather","onClick","Component","WeatherNow","iconUrl","country","coords","description","pressure","humidity","windspeed","winddeg","temp1","temp2","icon","visible","weatherNow","display","now","cityName","coord","lat","lon","sys","weather","main","wind","speed","deg","Number","temp","toFixed","imgBig","src","alt","style","row","column","details","WeatherForecast","weatherForecast","columns","data","i","nineth","key","imgSml","dt_txt","slice","push","txtBig","Forecast","errorMessage","url","apiID","query","axios","all","get","then","forecast","list","catch","error","response","message","App","Boolean","window","location","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.326dd04a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"WeatherNow_row__ZEI9u\",\"column\":\"WeatherNow_column__2sBLO\",\"imgBig\":\"WeatherNow_imgBig__3dcVT\",\"details\":\"WeatherNow_details__2IeMe\",\"name\":\"WeatherNow_name__2Rycq\",\"coords\":\"WeatherNow_coords__u4zrR\",\"temp\":\"WeatherNow_temp__3dM7s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage\":\"Forecast_errorMessage__1GH8e\"};","let bigCities = [\r\n    [\"Chongqing\", \"China\"],\r\n    [\"Shanghai\", \"China\"],\r\n    [\"Beijing\", \"China\"],\r\n    [\"Lagos\", \"Nigeria\"],\r\n    [\"Mumbai\", \"India\"],\r\n    [\"Dhaka\", \"Bangladesh\"],\r\n    [\"Chengdu\", \"China\"],\r\n    [\"Karachi\", \"Pakistan\"],\r\n    [\"Guangzhou\", \"China\"],\r\n    [\"Istanbul\", \"Turkey\"],\r\n    [\"Tokyo\", \"Japan\"],\r\n    [\"Tianjin\", \"China\"],\r\n    [\"Moscow\", \"Russia\"],\r\n    [\"SÃ£o Paulo\", \"Brazil\"],\r\n    [\"Kinshasa\", \"DR Congo\"],\r\n    [\"Delhi\", \"India\"],\r\n    [\"Baoding\", \"China\"],\r\n    [\"Lahore\", \"Pakistan\"],\r\n    [\"Wuhan\", \"China\"],\r\n    [\"Cairo\", \"Egypt\"],\r\n    [\"Seoul\", \"Korea, South\"],\r\n    [\"Jakarta\", \"Indonesia\"],\r\n    [\"Lima\", \"Peru\"],\r\n    [\"Mexico City\", \"Mexico\"],\r\n    [\"London\", \"United Kingdom\"],\r\n    [\"Bangkok\", \"Thailand\"],\r\n    [\"Xi'an\", \"China\"],\r\n    [\"Bangalore\", \"India\"],\r\n    [\"New York\", \"United States\"],\r\n    [\"Ho Chi Minh City\", \"Vietnam\"],\r\n    [\"Shenzhen\", \"China\"],\r\n    [\"Suzhou\", \"China\"],\r\n    [\"Nanjing\", \"China\"],\r\n    [\"Tehran\", \"Iran\"],\r\n    [\"Rio de Janeiro\", \"Brazil\"],\r\n    [\"Shantou\", \"China\"],\r\n    [\"Kolkata\", \"India\"],\r\n    [\"Shijiazhuang\", \"China\"],\r\n    [\"Harbin\", \"China\"],\r\n    [\"Los Angeles\", \"United States\"],\r\n    [\"Buenos Aires\", \"Argentina\"],\r\n    [\"Osaka\", \"Japan\"],\r\n    [\"Nagoya\", \"Japan\"],\r\n    [\"Paris\", \"France\"],\r\n    [\"Manila\", \"Philippines\"],\r\n    [\"Chicago\", \"United States\"],\r\n    [\"Kuala Lumpur\", \"Malaysia\"],\r\n    [\"Budapest\", \"Hungary\"],\r\n    [\"Warsaw\", \"Poland\"],\r\n    [\"Kathmandu\", \"Nepal\"],\r\n    [\"Montreal\", \"Canada\"],\r\n    [\"Barcelona\", \"Spain\"],\r\n    [\"Maracaibo\", \"Venezuela\"],\r\n    [\"Philadelphia\", \"United States\"],\r\n    [\"Phoenix\", \"United States\"],\r\n    [\"Oran\", \"Algeria\"],\r\n    [\"Semarang\", \"Indonesia\"],\r\n    [\"Recife\", \"Brazil\"],\r\n    [\"Guadalajara\", \"Mexico\"],\r\n    [\"Vijayawada\", \"India\"],\r\n    [\"Fukuoka\", \"Japan\"],\r\n    [\"Porto Alegre\", \"Brazil\"],\r\n    [\"Kyoto\", \"Japan\"],\r\n    [\"San Diego\", \"United States\"],\r\n    [\"Milan\", \"Italy\"],\r\n    [\"Ibadan\", \"Nigeria\"],\r\n    [\"Dallas\", \"United States\"],\r\n    [\"Abuja\", \"Nigeria\"],\r\n    [\"Campinas\", \"Brazil\"],\r\n    [\"Monterrey\", \"Mexico\"]\r\n]\r\n\r\nexport { bigCities }","import React, { Component } from 'react';\r\nimport { bigCities } from '../../assets/bigCities'\r\n\r\nimport styles from \"./CityInput.module.css\"\r\n\r\nclass CityInput extends Component {\r\n    state = { city: '' }\r\n\r\n    sendCityName = (e, city) => {\r\n        if (e) {e.preventDefault()}\r\n        if (city) {\r\n            this.props.getWeatherData(city)\r\n        } else {\r\n            this.props.getWeatherData(this.state.city)\r\n        }\r\n    }\r\n\r\n    randomCityName = e => {\r\n        e.preventDefault();\r\n        let randNum = Math.floor(Math.random() * bigCities.length)\r\n        this.setState({\r\n            city: bigCities[randNum][0]\r\n        })\r\n        this.sendCityName(null, bigCities[randNum][0]);\r\n    }\r\n\r\n    changeInputTextHandler = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <main>\r\n                <form id={styles.locationForm}>\r\n                    <fieldset>\r\n                        <legend>Input city name </legend>\r\n                        <p>\r\n                            <input type=\"text\" \r\n                                id={styles.city} \r\n                                name=\"city\" \r\n                                onChange={this.changeInputTextHandler} \r\n                                value={this.state.city}/>\r\n                        </p>\r\n                        <div className={styles.flexRow}>\r\n                            <button id={styles.checkWeather} onClick={this.sendCityName}>Check weather</button>\r\n                            <button id={styles.random} onClick={this.randomCityName}>Random city</button>\r\n                        </div>\r\n                    </fieldset>\r\n                </form>\r\n            </main>\r\n         );\r\n    }\r\n}\r\n \r\nexport default CityInput;","import React, { Component } from 'react';\r\n\r\nimport styles from './WeatherNow.module.css'\r\n\r\nclass WeatherNow extends Component {\r\n\r\n    iconUrl = 'http://openweathermap.org/img/w/'\r\n\r\n    render() { \r\n        \r\n        let visible = (!(this.props.weatherNow) ) ? {display: 'none'} : {};\r\n        let now = this.props.weatherNow\r\n        let cityName = this.props.cityName;\r\n        let country, coords, description, pressure, humidity, windspeed, winddeg, temp1, temp2, icon;\r\n        if (now) {\r\n            coords = `Latitude: ${now.coord.lat}, Longitude: ${now.coord.lon}`;\r\n            country = `(${now.sys.country})`\r\n            description = `Weather: ${now.weather[0].description}`;\r\n            humidity = `Humidity: ${now.main.humidity} % `;\r\n            pressure = `Pressure: ${now.main.pressure} hPa`;\r\n            windspeed = `Wind speed: ${now.wind.speed} km/h`;\r\n            winddeg = now.wind.deg ? `Wind direction: ${now.wind.deg} deg` : null // direction is given only when wind is strong enough\r\n            temp1 = `Temperature:`;\r\n            temp2 = `${(Number(now.main.temp) - 273.15).toFixed(1)} C | ${(Number(now.main.temp)*9/5-459.67).toFixed(1)} F`;\r\n            icon = <img className={styles.imgBig} src={this.iconUrl + now.weather[0].icon + '.png'}  alt=\"weather icon\"  />\r\n        }\r\n\r\n        return ( \r\n            <section id=\"weatherNow\" style={visible}>\r\n                <div className={styles.row}>\r\n                    <div id={styles.name}>{cityName}<span>{country}</span></div>\r\n                    <div id={styles.coords}>{coords}</div>\r\n                </div>\r\n                <div className={styles.row}>\r\n                    <div className={styles.column} id={styles.details}>\r\n                        <div id={styles.description}>{description}</div>\r\n                        <div id={styles.pressure}>{pressure}</div>\r\n                        <div id={styles.humidity}>{humidity}</div>\r\n                        <div id={styles.windspeed}>{windspeed}</div>\r\n                        <div id={styles.winddeg}>{winddeg}</div>\r\n                    </div>\r\n                    <div className={styles.row}>\r\n                        <div>{icon}</div>\r\n                        <div id={styles.temp}><span>{temp1}</span><b>{temp2}</b></div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n         );\r\n    }\r\n}\r\n \r\nexport default WeatherNow;","import React, { Component } from 'react';\r\n\r\nimport styles from './WeatherForecast.module.css'\r\n\r\nclass WeatherForecast extends Component {\r\n\r\n    iconUrl = 'https://openweathermap.org/img/w/'\r\n\r\n    render() { \r\n        let visible = (!(this.props.weatherForecast) ) ? {display: 'none'} : {};\r\n        let columns = []\r\n\r\n        if (this.props.weatherForecast !== false) {\r\n            let data = this.props.weatherForecast;\r\n            for (let i = 1; i < 10; i++) { // creates 9 columns with forecast data\r\n                let column = <div className={styles.nineth} key={i}>\r\n                        <div className={styles.temp}>{(Number(data[i].main.temp) - 273.15).toFixed(1)} C</div>\r\n                        <div className={styles.icon}>\r\n                            <img src={this.iconUrl+data[i].weather[0].icon+\".png\"} alt=\"weather icon\" className={styles.imgSml}></img>\r\n                        </div>\r\n                        <div className={styles.temp}>{data[i].dt_txt.slice(5, 10)} {data[i].dt_txt.slice(-8, -3)}</div>\r\n                    </div>;\r\n\r\n                columns.push(column);\r\n            }\r\n        }\r\n        \r\n        return ( \r\n            <section id=\"weather-forecast\" style={visible}>\r\n                <span className={styles.txtBig}>Forecast:</span>\r\n                <div className={styles.row}>{columns}</div>\r\n            </section>\r\n         );\r\n    }\r\n}\r\n \r\nexport default WeatherForecast;","import React, {Component} from 'react';\r\n\r\nimport CityInput from '../CityInput/CityInput';\r\nimport WeatherNow from '../WeatherNow/WeatherNow';\r\nimport WeatherForecast from '../WeatherForecast/WeatherForecast';\r\n\r\n            import axios from 'axios';\r\n            // import { forecastData, weatherData } from '../../weatherData';\r\n\r\nimport styles from './Forecast.module.css'\r\n\r\nclass Forecast extends Component {\r\n    state = {\r\n        weatherNow: false,\r\n        weatherForecast: false,\r\n        errorMessage: false,\r\n        city: ''\r\n    }\r\n\r\n    url = 'https://api.openweathermap.org/data/2.5/'\r\n    apiID = 'fd8de74bb30e63fa5bdd052cabd79493'\r\n\r\n    getWeatherData = (city) => {\r\n        \r\n        const query = `?q=${city}&APPID=${this.apiID}`\r\n        axios.all([\r\n            axios.get(`${this.url}weather${query}`),\r\n            axios.get(`${this.url}forecast${query}`)\r\n            ])\r\n            .then(([weather, forecast]) => {\r\n                this.setState({\r\n                    weatherNow: weather.data,\r\n                    weatherForecast: forecast.data.list,\r\n                    city: city,\r\n                    errorMessage: false\r\n                })\r\n            })\r\n            .catch(error => {\r\n                // displays error message and hides both weather displays\r\n                this.setState({\r\n                    errorMessage: error.response.data.message,\r\n                    weatherNow: false,\r\n                    weatherForecast: false,\r\n                })\r\n            })\r\n\r\n                        // this.setState({\r\n                        //     weatherNow: weatherData,\r\n                        //     weatherForecast: forecastData.list,\r\n                        //     city: city\r\n                        // })\r\n    }\r\n\r\n\r\n    // componentDidMount = () => {\r\n    //     this.getWeatherData('Krakow')\r\n    // }\r\n\r\n    render () {\r\n\r\n        let now = this.state.weatherNow;\r\n        let forecast = this.state.weatherForecast;\r\n        let cityName = this.state.city;\r\n        let visible = (!(this.state.errorMessage) ) ? {display: 'none'} : {};\r\n\r\n        return (\r\n            <div className={styles.forecast}>\r\n                <CityInput getWeatherData={this.getWeatherData} />\r\n                <WeatherNow weatherNow={now} cityName={cityName} />\r\n                <WeatherForecast weatherForecast={forecast}/>\r\n                <div style={visible} className={styles.errorMessage}>Error message: \"{this.state.errorMessage}\"</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Forecast;","import React, { Component } from 'react';\nimport Forecast from './containers/Forecast/Forecast';\n\nclass App extends Component {\n  render() {\n    return (\n        <div className=\"App\">\n          <Forecast />\n        </div>\n    );\n  }\n}\n\nexport default App;\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst app = <App />\n\nReactDOM.render(app, document.getElementById('root'));\n\nserviceWorker.unregister();\n ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"WeatherForecast_row__1N3OK\",\"txtBig\":\"WeatherForecast_txtBig__3qJw0\",\"imgSml\":\"WeatherForecast_imgSml__p_q39\",\"nineth\":\"WeatherForecast_nineth__1M01d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"locationForm\":\"CityInput_locationForm__3c2wJ\",\"flexRow\":\"CityInput_flexRow__2H3Tb\",\"checkWeather\":\"CityInput_checkWeather__1gD_6\",\"random\":\"CityInput_random__QCTm-\"};"],"sourceRoot":""}